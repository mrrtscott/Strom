apply plugin: 'com.android.application'

android {
    compileSdkVersion build_versions.target_sdk

    defaultConfig {
        applicationId "io.left.core.imagepickersample"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode vCode()
        versionName vName

        def apkName = appName + "-" + getDateTime() + "-" + versionName
        setProperty("archivesBaseName", apkName)


        //When we need only one language this filter reduces APK size
        resConfigs "en"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        //during jitpack build we omit the dependency on module and build with remote dependency
        remote {
            debuggable true
            //Default sigin config explicitly applied to debug
            signingConfig signingConfigs.debug
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        enabled = true
    }

    sourceSets {
        main {
            //An experimental approach to group all layouts. If developers does not like we can simply
            //ignore grouping in this way
            res.srcDirs = [
                    'src/main/res/layouts/image_picker',
                    'src/main/res/layouts',
                    'src/main/res'
            ]
        }
    }

}

dependencies {
    //Support
    implementation deps.support.app_compat
    implementation deps.constraint_layout
    implementation deps.support.recyclerview

    //framework
    //Below separate inclusion make sure that we include remote gradle dependency only during remote build.
    //Otherwise we always use our local module
    debugImplementation deps.strom_local
    releaseImplementation deps.strom_local
    //dependency variant
    remoteImplementation deps.strom_remote
    remoteImplementation deps.leak_canary
}
//Configuration end