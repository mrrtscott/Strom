plugins {
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.6.3'
}

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

apply plugin: 'com.android.application'

android {
    compileSdkVersion build_versions.target_sdk
    defaultConfig {
        applicationId "io.left.core.sample"
        minSdkVersion build_versions.min_sdk
        targetSdkVersion build_versions.target_sdk
        versionCode vCode()
        versionName vName

        def apkName = appName + "-" + getDateTime() + "-" + versionName
        setProperty("archivesBaseName", apkName)

        //When we need only one language this filter reduces APK size
        resConfigs "en"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        multiDexEnabled true

        //Schema should upload with versioning tool so that record will be maintained of DB changed at same place
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildTypes {

        debug {
            testCoverageEnabled true
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        //during jitpack build we omit the dependency on module and build with remote dependency
        remote {
            debuggable true
            //Default sigin config explicitly applied to debug
            signingConfig signingConfigs.debug
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
    sourceSets {
        main {
            //An experimental approach to group all layouts. If developers does not like we can simply
            //ignore grouping in this way
            res.srcDirs = [
                    'src/main/res/layouts/details',
                    'src/main/res/layouts/datainput',
                    'src/main/res/layouts/splash',
                    'src/main/res/layouts',
                    'src/main/res'
            ]
        }
    }
}

dependencies {
    //Support
    implementation deps.support.app_compat
    implementation deps.constraint_layout
    implementation deps.support.recyclerview
    //lifecycle
    implementation deps.lifecycle.runtime
    implementation deps.lifecycle.extensions
    annotationProcessor deps.lifecycle.compiler
    //LiveDataReactStream
    implementation deps.livedata_reactive
    //room with Rx
    implementation deps.room.runtime
    implementation deps.room.rxjava2
    annotationProcessor deps.room.compiler
    // RxJava
    implementation deps.rx_android
    implementation deps.rxjava2
    //Retrofit
    implementation deps.retrofit.runtime
    implementation deps.retrofit.gson
    implementation deps.okhttp_logging_interceptor
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
    // Dependencies for local unit tests
    testImplementation deps.junit
    testImplementation deps.hamcrest
    testImplementation deps.arch_core.testing
    testImplementation deps.mockito.all
    testImplementation deps.truth
    testImplementation deps.atsl.rules
    implementation deps.espresso.core
    androidTestImplementation deps.espresso.contrib
    testImplementation deps.espresso.intents
    // Android Testing Support Library's runner and rules
    androidTestImplementation deps.atsl.runner
    androidTestImplementation deps.atsl.rules
    androidTestImplementation deps.room.testing
    androidTestImplementation deps.arch_core.testing
    androidTestImplementation deps.retrofit.mock

    //framework
    //Below separate inclusion make sure that we include remote gradle dependency only during remote build.
    //Otherwise we always use our local module
    debugImplementation deps.framework
    releaseImplementation deps.framework
    //dependency variant
    remoteImplementation deps.framework_remote
    remoteImplementation deps.leak_canary
}
//Configuration end


//Test report
task jacocoTestReport(type: JacocoReport, dependsOn: ['test', 'createDebugCoverageReport']) {
    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/*$[0-9].*']
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: ['jacoco/testDebugUnitTest.exec',
                                                               'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'])
}
//Test report end